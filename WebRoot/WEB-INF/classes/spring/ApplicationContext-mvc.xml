<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd	
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
								http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd">
		
	<!-- 启用注解解析器   开始-->
	<mvc:annotation-driven/>	
	<!-- 自动扫描包，可以写多个 -->
	<!--     <context:component-scan base-package="com.xxx,com.xxx.session,com.xxx.xxx" ></context:component-scan> -->
	<context:component-scan base-package="com.fh.controller" />
	<context:component-scan base-package="com.json" />

	
	<!-- 加载注解解析器三种方式，各有不同
	1、<context:annotation-config/>
	@Autowired、@ Resource 、@ PostConstruct、@ PreDestroy等
	2、<context:component-scan base-package=”XX.XX”/> 
	最常用的一种方式，并且基本可以完全替代<context:annotation-config/>
	3、<mvc:annotation-driven/>
	数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。 -->
	
	
	<!--  <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/*.do*"/>
			<bean class="com.fh.interceptor.LoginHandlerInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**/*.do*"/>
			<bean class="com.fh.interceptor.RightsHandlerInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	  -->
	  
  	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/*.do*"/>
			<bean class="com.fh.interceptor.LoginHandlerInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	 
	<!-- 配置SpringMVC的视图解析器,在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	
	<bean id="exceptionResolver" class="com.fh.resolver.MyExceptionResolver"></bean>
	<!-- 上传拦截，如最大上传值及最小上传值 -->
	  <bean id="multipartResolver"   class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >   
		  <property name="maxUploadSize">    
	          <value>104857600</value>    
	       </property>   
	        <property name="maxInMemorySize">    
	            <value>4096</value>    
	        </property>   
	         <property name="defaultEncoding">    
	            <value>utf-8</value>    
	        </property> 
    </bean>  
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<aop:config>  
	        <aop:pointcut id="pc" expression="execution(* com.fh.controller..*(..))" />
			<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
</beans>
